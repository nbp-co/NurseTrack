Title: Inject build/version info into UI (Feedback modal) via build-time script

Branch: create 0904/version-label off current branch.

Constraints

Do not change frontend framework or backend infra.

Keep all existing UI layout; only add a small version label + hidden feedback metadata.

Week start/local time behavior is irrelevant here; do not touch it.

1) Generate src/build-info.ts at build/start

Add file: scripts/write-version.js

// scripts/write-version.js
/* Creates src/build-info.ts with {sha, tag, branch, dirty, builtAt} */
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

function sh(cmd) {
  try { return execSync(cmd, { encoding: 'utf8' }).trim(); }
  catch { return ''; }
}

const sha = process.env.GIT_SHA || sh('git rev-parse --short=7 HEAD') || 'unknown';
const tag = process.env.GIT_TAG || sh('git describe --tags --abbrev=0') || '';
const branch = process.env.GIT_BRANCH || sh('git rev-parse --abbrev-ref HEAD') || 'unknown';
let dirty = false;
try { execSync('git diff --quiet'); } catch { dirty = true; }

const builtAt = new Date().toISOString();
const out = `
/** Auto-generated by scripts/write-version.js — do not edit */
export const BUILD_INFO = {
  sha: ${JSON.stringify(sha)},
  tag: ${JSON.stringify(tag)},
  branch: ${JSON.stringify(branch)},
  dirty: ${JSON.stringify(dirty)},
  builtAt: ${JSON.stringify(builtAt)}
} as const;
`;
const outPath = path.join(process.cwd(), 'src', 'build-info.ts');
fs.mkdirSync(path.dirname(outPath), { recursive: true });
fs.writeFileSync(outPath, out);
console.log('Wrote', outPath, { sha, tag, branch, dirty, builtAt });


Update package.json scripts (augment—don’t remove existing commands):

Add prebuild and predev so info exists both in dev and prod builds.

{
  "scripts": {
    "predev": "node scripts/write-version.js",
    "prebuild": "node scripts/write-version.js"
  }
}


If predev or prebuild already exist, chain them:
"prebuild": "node scripts/write-version.js && <existing>"

2) Small UI component to display version

Add file: src/components/system/VersionBadge.tsx

import { BUILD_INFO } from '../../build-info';

function formatVersion() {
  const label = BUILD_INFO.tag && BUILD_INFO.tag.length > 0
    ? BUILD_INFO.tag
    : `#${BUILD_INFO.sha}`;
  return BUILD_INFO.dirty ? `${label} (dirty)` : label;
}

export function versionStringLong() {
  return `${formatVersion()} • ${new Date(BUILD_INFO.builtAt).toLocaleString()}`;
}

export default function VersionBadge({ inline = false }: { inline?: boolean }) {
  const text = versionStringLong();
  return (
    <span
      aria-label="Build version"
      className={inline ? "text-xs text-muted-foreground" : "text-[11px] text-muted-foreground"}
      title={`branch: ${BUILD_INFO.branch}`}
      data-build-sha={BUILD_INFO.sha}
      data-build-branch={BUILD_INFO.branch}
      data-build-tag={BUILD_INFO.tag}
      data-build-time={BUILD_INFO.builtAt}
    >
      {text}
    </span>
  );
}

3) Show it in the Feedback modal and include in submissions

Locate your Feedback modal/component (search for files like FeedbackModal.tsx, FeedbackDrawer.tsx, or a “Feedback” button that opens a form).

At the bottom of the form (e.g., modal footer/subtext), render the badge:

import VersionBadge, { versionStringLong } from "@/components/system/VersionBadge"; // adjust path

// ...inside modal footer or below the submit button:
<div className="mt-2">
  <VersionBadge inline />
</div>


Add a hidden field so every feedback submission carries the exact build info:

<input type="hidden" name="buildVersion" value={versionStringLong()} />
<input type="hidden" name="buildSha" value={BUILD_INFO.sha} />
<input type="hidden" name="buildBranch" value={BUILD_INFO.branch} />
<input type="hidden" name="buildTag" value={BUILD_INFO.tag} />
<input type="hidden" name="buildTime" value={BUILD_INFO.builtAt} />


If the feedback is posted via JSON, include these keys in the payload instead of hidden inputs.

If no Feedback modal exists:

As a fallback, add <VersionBadge inline /> in your App footer or Settings/About page.

4) Quick sanity checks

Run dev: npm run dev (or your start command) — verify src/build-info.ts is generated and the version appears.

Make a local change without committing — the label should show “(dirty)”.

Create a tag git tag v0.1.0 && git push --tags — label should prefer v0.1.0 over #<sha>.

5) Minimal tests (optional but quick)

Add file: src/components/system/VersionBadge.test.tsx

import { describe, it, expect, vi } from "vitest";
vi.mock("../../build-info", () => ({
  BUILD_INFO: { sha: "abc1234", tag: "", branch: "feat/x", dirty: false, builtAt: "2025-09-04T12:00:00Z" }
}));
import { versionStringLong } from "./VersionBadge";

describe("versionStringLong", () => {
  it("prefers sha when no tag", () => {
    expect(versionStringLong()).toContain("#abc1234");
  });
});